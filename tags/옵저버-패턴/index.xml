<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>옵저버 패턴 on Korea Web Service Study Group</title>
    <link>http://kwsstudy.github.io/tags/%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4/</link>
    <description>Recent content in 옵저버 패턴 on Korea Web Service Study Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Feb 2016 11:00:00 +0900</lastBuildDate>
    <atom:link href="http://kwsstudy.github.io/tags/%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>옵저버 패턴</title>
      <link>http://kwsstudy.github.io/post/%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 28 Feb 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4/</guid>
      <description>

&lt;h2 id=&#34;옵저버-패턴의-정의:c3fd241b372c00a0f0e429e94537ab88&#34;&gt;옵저버 패턴의 정의&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;옵저버 패턴(Observer Pattern)에서는 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to-many)의존성을 정의 한다&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;신문 구독 메커니즘에서 출판사를 주제(subject), 구독자를 옵저버(observer)라고 생각하시면 이해하기 쉽다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;옵저버 패턴을 적용하여 어플리케이션을 만들어 보겠다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;우리가 만들 애플리케이션은 위치 어플리케이션이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Position 객체를 받아서 x좌표 y좌표를 받아서 디스플레이 장비에서 갱신해 가면서 보여주는 어플리케이션이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Position 인터페이스&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public classPosition {
public float getPositionX() {
    return 0.0f;
}


public float getPositionY() {
    return 0.0f;
}
    /*
    * 포지션 값이 변경될 때마다 알려주기 위한 메서드
    */
public void positionChanged(){
    float positionX = getPositionX();
    float positionY = getPositionY();
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;지금 알고 있는 것들&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;x좌표 y좌표를 알아낼 수 있는 메서드가 있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;새로운 좌표 데이터가 나올 때마다 positionChanged 메소드가 호출된다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;새로운 좌표 데이터가 나올 때마다 디스플레이를 갱신해야 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;시스템이 확장 가능해야 한다. 다른 개발자들이 별도의 디스플레이 항목을 만들 수 있도록 해야 하고 사용자들이 애플리케이션에 마음대로 디스플레이 항목을 추가/제거 할 수 있도록 해야 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;위의 어플리케이션에 옵저버 패턴을 적용하기 전 옵저버 패턴을 좀더 자세히 알아보자&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;옵저버 패턴은 신문 구독메커니즘과 비슷하다&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;독자가 특정 신문을 구독 신청하면 새로운 신문이 나올 때마다 배달을 받을 수 있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;신문을 더 이상 보고 싶지 않으면 구독 해지 신청을 하면 된다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;신문사가 계속 운영하는 이상 개인, 기관, 회사 등에서 꾸준히 구독 및 해지를 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;이것을 옵저버 패턴과 비교를 하면&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;신문사는 주제객체가 된다. 그리고 구독자들은 옵저버 객체가 되는 것이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A라는 객체가 옵저버가 되고 싶어한다. 그러면 주제 객체에 옵저버가 되고 싶다고 요청을 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;이렇게 옵저버 객체들은 주제객체에 옵저버로써 등록을 하게 되며 주제객체의 값이 변경되면 등록된 모든 옵저버들은 주제객체에 값이 바뀌었다는 연락을 받습니다.
1.등록된 B라는 객체가 옵저버에서 탈퇴하고 싶어한다. 그러면 B라는 객체는 옵저버 집합에서 제외된다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;여기서 옵저버 패턴을 다시 한번 정의해 보자&lt;/li&gt;
&lt;li&gt;옵저버 패턴에서는 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다 의존성을 정의한다.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;여기서 중요한 것은 일대 다 관계를 정의한다는 것과 한 객체의 상태가 변경되면 그 객체에 의존하는 모든 객체에 연락이 가는 것이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;옵저버 객체의 느슨한 결합의 위력&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;옵저버 패턴에서는 주제와 옵저버가 느슨하게 결합되어 있는 객체 디자인을 제공한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;주제가 옵저버에 대해서 아는 것은 옵저버가 특정 인터페이스를 구현한다는 것 뿐이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;옵저버는 언제든지 새로 추가 할 수 있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;새로운 형식의 옵저버를 추가하려고 할 때도 주제를 전혀 변경할 필요가 없다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;주제와 옵저버는 서로 독립적으로 재사용 될 수 있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;주제나 옵저버가 바뀌더라도 서로한테 영향을 미치지는 않는다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;예제:c3fd241b372c00a0f0e429e94537ab88&#34;&gt;예제&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Subject {
    public void addObserver(Observer o);
    public void removeObserver(Observer o);
    public void notiObserver();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Observer {
    public void update(float positionX, float positionY);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface displayPosition {
    public void display();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.ArrayList;

public class Position implements Subject{
    private ArrayList&amp;lt;Observer&amp;gt; observers;
    private float positionX;
    private float positionY;
    
    public Position() {
        observers = new ArrayList&amp;lt;&amp;gt;();
    }
    
    @Override
    public void addObserver(Observer o) {
        observers.add(o);
    }

    @Override
    public void removeObserver(Observer o) {
        int i = observers.indexOf(o);
        if (i &amp;gt;= 0) {
            observers.remove(i);
        }
    }

    @Override
    public void notiObserver() {
        for (int i = 0; i &amp;lt; observers.size(); i++) {
            Observer observer = (Observer) observers.get(i);
            observer.update(positionX, positionX);
        }
        
    }
    
    public float getPositionX() {
        return 0.0f;
    }
    
    public float getPositionY() {
        return 0.0f;
    }
    public void positionChanged(){
        notiObserver();
    }
    
    public void setPosition(float positionX, float positionY){
        this.positionX = positionX;
        this.positionY = positionY;
        positionChanged();
    }
    
    //기타메서드
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CurrentDisplay implements Observer, DisplayPosition{
    private float positionX;
    private float positionY;
    private Subject positionData;
    
    public CurrentDisplay(Subject positionData) {
        this.positionData = positionData;
        positionData.addObserver(this);
    }
    @Override
    public void display() {
        System.out.println(&amp;quot;positionX : &amp;quot; + positionX + &amp;quot; positionY :&amp;quot; + positionY);
    }

    @Override
    public void update(float positionX, float positionY) {
        this.positionX = positionX;
        this.positionY = positionY;
        display();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;자바 내장 옵저버 패턴 사용하기&lt;/li&gt;

&lt;li&gt;&lt;p&gt;가장 일반적으로 쓸 수 있는 것은 java.util.Observer 와 java.util.Observalbe&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;자바 내장 옵저버 패턴 작동 방식&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;객체가 옵저버가 되는 방식 : 위에서 구현 한 것과 마찬가지로 java.util.Observer 인터페이스를 구현하고 addObserver()를 호출&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Observable에서 연락을 돌리는 방법 : java.util.Observable 클래스를 확장하여 Observable 클래스를 생성 한 후 setChanged() 메소드를 호출해서 객체의 상태가 바뀌었다는 것을 알리고 notifyObservers()를 호출&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;옵저버가 연락을 받는 방법 : update()메소드를 구현&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;예제-1:c3fd241b372c00a0f0e429e94537ab88&#34;&gt;예제&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.kws.javaobserver;

public interface DisplayPosition {
    public void display();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.kws.javaobserver;
import java.util.Observable;

public class Position extends Observable{
    private float positionX;
    private float positionY;
    
    public float getPositionX() {
        return positionX;
    }
    
    public float getPositionY() {
        return positionY;
    }
    public void positionChanged(){
        setChanged();
        notifyObservers();
    }
    
    public void setPosition(float positionX, float positionY){
        this.positionX = positionX;
        this.positionY = positionY;
        positionChanged();
    }
    
    //기타메서드
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.kws.javaobserver;
import java.util.Observable;
import java.util.Observer;

public class CurrentDisplay implements Observer, DisplayPosition{
    private float positionX;
    private float positionY;
    Observable observable;
    
    public CurrentDisplay(Observable observable) {
        this.observable = observable;
        observable.addObserver(this);
    }
    @Override
    public void display() {
        System.out.println(&amp;quot;positionX : &amp;quot; + positionX + &amp;quot; positionY :&amp;quot; + positionY);
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof Position) {
            Position position = (Position)o;
            this.positionX = position.getPositionX();
            this.positionY = position.getPositionY();
            display();
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.kws.javaobserver;

public class positionStation {

    public static void main(String[] args) {
        Position positionData = new Position();
        CurrentDisplay currentDisplay = new CurrentDisplay(positionData);
        positionData.setPosition(121.5f, 25.6f);
        positionData.setPosition(122.5f, 123.6f);
        positionData.setPosition(56.5f, 77.6f);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;java.util.Observable의 단점&lt;/li&gt;
&lt;li&gt;Observable은 클래스이기 때문에 서브 클래스를 만들어야 한다. 이미 다른 슈퍼 클래스를 확장하고 있는 클래스에 사용이 불가능하다.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Observable 인터페이스라는 것이 없기 때문에 자바에 내장된 Observer API하고 잘 맞는 클래스를 직접 구현하는 것이 불가능하다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;해결법은 확장이 가능하면 Observable를 사용하고 확장할 수 없는 경우라면 직접 구현해서 사용해야 한다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;옵저버-패턴의-예:c3fd241b372c00a0f0e429e94537ab88&#34;&gt;옵저버 패턴의 예&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;리스너 : 예를 들어 한 버튼에 여러개의 리스너가 등록이 가능한데 옵저버 패턴의 정의대로 일대 다 관계로 정의 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HEAD First Design Patterns Study</title>
      <link>http://kwsstudy.github.io/post/Home/</link>
      <pubDate>Sun, 21 Feb 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/Home/</guid>
      <description>

&lt;h1 id=&#34;head-first-design-patterns-study:b4d7124d2993cd13aabeec1fc19baf51&#34;&gt;HEAD First Design Patterns Study&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;스터디 기간 : 02/28 ~ 04/10&lt;/li&gt;
&lt;li&gt;스터디 장소 : 서울대 입구역 AZ Story&lt;/li&gt;
&lt;li&gt;스터디원 : 노휘겸 / 박민규 / 이돈일 / 이지훈&lt;/li&gt;
&lt;li&gt;보증금 : 20,000원&lt;/li&gt;
&lt;li&gt;스터디 룸비 : 28,000원&lt;/li&gt;
&lt;li&gt;한달 한번 결석 가능&lt;/li&gt;
&lt;li&gt;발표날 빠지면 영구 제명( 천재지변 / 경조사제외 )&lt;/li&gt;
&lt;li&gt;자기 발표 부분 &lt;a href=&#34;https://github.com/KWSStudy/DesignPartterns/wiki&#34;&gt;Wiki&lt;/a&gt;에 정리 필&lt;/li&gt;
&lt;li&gt;스터디 목표 : 디자인 패턴을 실무에 적용 할 수있는 레벨까지 끌어 올리기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;스터디-진행:b4d7124d2993cd13aabeec1fc19baf51&#34;&gt;스터디 진행&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;02/28&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/옵저버-패턴&#34;&gt;옵저버 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/데코레이터-패턴&#34;&gt;데코레이터 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/06&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/팩토리-패턴&#34;&gt;팩토리 패턴&lt;/a&gt; (노휘겸)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/스트래티지-패턴&#34;&gt;스트래티지 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/싱글턴-패턴&#34;&gt;싱글턴 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/13&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/커맨드-패턴&#34;&gt;커맨드 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/어댑터-패턴과-퍼사드-패턴&#34;&gt;어댑터 패턴과 퍼사드 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/20 (노휘겸 결)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/템플릿-메소드-패턴&#34;&gt;템플릿 메소드 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/이터레이터와-컴포지트-패턴&#34;&gt;이터레이터와 컴포지트 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/27(이지훈 결)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/스테이트-패턴&#34;&gt;스테이트 패턴&lt;/a&gt; (노휘겸)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/프록시-패턴&#34;&gt;프록시 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;04/03&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/컴파운드-패턴&#34;&gt;컴파운드 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/나머지-패턴&#34;&gt;나머지 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>