<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>스테이트 패턴 on Korea Web Service Study Group</title>
    <link>http://kwsstudy.github.io/tags/%EC%8A%A4%ED%85%8C%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4/</link>
    <description>Recent content in 스테이트 패턴 on Korea Web Service Study Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Mar 2016 11:00:00 +0900</lastBuildDate>
    <atom:link href="http://kwsstudy.github.io/tags/%EC%8A%A4%ED%85%8C%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>스테이트 패턴</title>
      <link>http://kwsstudy.github.io/post/%EC%8A%A4%ED%85%8C%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 27 Mar 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/%EC%8A%A4%ED%85%8C%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4/</guid>
      <description>

&lt;h1 id=&#34;스테이트-state-패턴:2c82a25a48e7f5639b430349a57c69f5&#34;&gt;스테이트(State) 패턴&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;스테이트 패턴&lt;/strong&gt;을 이용하면 객체의 내부 상태가 바뀜에 따라서 객체의 행동을
바꿀 수 있습니다.&lt;br /&gt;
마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWdVoxdHp1SWpsVzQ&#34; alt=&#34;스테이트패턴&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;뽑기-기계의-상태-변화:2c82a25a48e7f5639b430349a57c69f5&#34;&gt;뽑기 기계의 상태 변화&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWRG16OGdTTlhNdVE&#34; alt=&#34;상태변화&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;객체의 상태에 따라서 실행되는 행위가 달라져야 할 때&lt;/em&gt;&lt;br /&gt;
→ 객체 내부에서 &lt;code&gt;if&lt;/code&gt; 절 또는 &lt;code&gt;switch - case&lt;/code&gt; 절 의 전개&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 동전을 투입하는 행위
public void insertQuarter() {
  if (state == HAS_QUARTER) {
    System.out.println(&amp;quot;동전은 한 개만 넣어주세요.&amp;quot;);
  } else if (state == NO_QUARTER) {
    state = HAS_QUARTER;
    System.out.println(&amp;quot;동전을 넣었습니다.&amp;quot;);
  } else if (state == SOLD_OUT) {
    System.out.println(&amp;quot;매진되었습니다. 다음 기회에 이용해주세요.&amp;quot;);
  } else if (state == SOLD) {
    System.out.println(&amp;quot;잠깐만 기다려 주세요. 알맹이가 나가고 있습니다.&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;모든 행위들 마다 위와 같은 코드가 반복되어야 함&lt;/em&gt;&lt;br /&gt;
→ 상태 자체를 객체로 만들면 어떨까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWNmtybTZGTkVoNnc&#34; alt=&#34;뽑기기계 스테이트패턴&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 상태를 나타내는 객체들이 구현할 인터페이스
public interface State {
  
  void insertQuarter();

  void ejectQuarter();

  void turnCrank();

  void dispense();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;각 상태들을 구현한다면&lt;/em&gt;&lt;br /&gt;
→ 해당 상태의 코드만 적용하면 됨&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SoldState implements State {
  GumballMachine gumballMachine;

  public SoldState(GumballMachine gumballMachine) {
    this.gumballMachine = gumballMachine;
  }

  @Override
  public void insertQuarter() {
    System.out.println(&amp;quot;잠깐만 기다려 주세요. 알맹이가 나가고 있습니다.&amp;quot;);
  }

  @Override
  public void ejectQuarter() {
    System.out.println(&amp;quot;이미 알맹이를 뽑으셨습니다.&amp;quot;);
  }

  @Override
  public void turnCrank() {
    System.out.println(&amp;quot;손잡이는 한 번만 돌려주세요.&amp;quot;);
  }

  @Override
  public void dispense() {
    gumballMachine.releaseBall();
    if (gumballMachine.getCount() &amp;gt; 0) {
      gumballMachine.setState(gumballMachine.getNoQuarterState());
    } else {
      System.out.println(&amp;quot;매진입니다.&amp;quot;);
      gumballMachine.setState(gumballMachine.getSoldOutState());
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래 코드로 &lt;code&gt;GumballMachine&lt;/code&gt; 객체 내부의 상태 객체를 변화 시킴&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;gumballMachine.setState(gumballMachine.getNoQuarterState());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;→ &lt;code&gt;GumballMachine&lt;/code&gt;을 사용하는 클라이언트 입장에서는 &lt;em&gt;객체의 클래스가 바뀌는 것 처럼 느낄 수 있음&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&#34;gameballmachine-의-메서드를-state-인터페이스가-왜-대부분-가져가는가:2c82a25a48e7f5639b430349a57c69f5&#34;&gt;&lt;code&gt;GameballMachine&lt;/code&gt;의 메서드를 &lt;code&gt;State&lt;/code&gt;인터페이스가 왜 대부분 가져가는가?&lt;/h5&gt;

&lt;p&gt;스테이트 패턴은 _내부 상태에 따라서 변화되는 행위를 추상화하는 것_이므로,&lt;br /&gt;
상태에 따라 변화되는 행위들을 모두 담아야 한다.&lt;/p&gt;

&lt;h5 id=&#34;다이어그램은-스트래티지패턴과-동일한-것-같은데:2c82a25a48e7f5639b430349a57c69f5&#34;&gt;다이어그램은 스트래티지패턴과 동일한 것 같은데?&lt;/h5&gt;

&lt;p&gt;스트래티지는 구성을 이용하여 상속을 대체하는 것이라면,&lt;br /&gt;
스테이트는 수많은 조건문의 대체하는 것이라고 보면 됨&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>