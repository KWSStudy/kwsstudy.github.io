<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>어댑터 패턴과 퍼사드 패턴 on Korea Web Service Study Group</title>
    <link>http://kwsstudy.github.io/tags/%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4%EA%B3%BC-%ED%8D%BC%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4/</link>
    <description>Recent content in 어댑터 패턴과 퍼사드 패턴 on Korea Web Service Study Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Mar 2016 12:00:00 +0900</lastBuildDate>
    <atom:link href="http://kwsstudy.github.io/tags/%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4%EA%B3%BC-%ED%8D%BC%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>어댑터 패턴과 퍼사드 패턴</title>
      <link>http://kwsstudy.github.io/post/%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4%EA%B3%BC-%ED%8D%BC%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 13 Mar 2016 12:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4%EA%B3%BC-%ED%8D%BC%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4/</guid>
      <description>

&lt;h3 id=&#34;어댑터:9f571712f0267fca69705d7ef0b317d4&#34;&gt;어댑터?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;국산 플러그와 유럽식 소켓사이에서 국산 전원 플러그를 유럽식 소켓에 꽂을 수 있게 해주는 역할을 해주는 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;어댑터-패턴-adapter-pattern-의-정의:9f571712f0267fca69705d7ef0b317d4&#34;&gt;어댑터 패턴(Adapter Pattern)의 정의&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;한 클래스(어떤)의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환합니다. 어탭터를 이용하면 &lt;strong&gt;인터페이스 호환성 문제&lt;/strong&gt; 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있습니다.&lt;/li&gt;
&lt;li&gt;어댑터는 클라이언트로부터 요청을 받아서 새로운 업체에서 제공하는 클래스에서 받아들일 수 있는 형태의 요청으로 변환시켜주는 중개인 역할을 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://drive.google.com/open?id=0B5s13shPbjz7WlNvdTd3WnNUcm8&#34; alt=&#34;어댑터패턴 예제&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;어댑티? -&amp;gt; 어댑터를 가운데 두고, 클라이언트와 정반대 위치에 있는것을 어댑티라고 부름.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;어탭터의-종류:9f571712f0267fca69705d7ef0b317d4&#34;&gt;어탭터의 종류&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;객체 어댑터&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://drive.google.com/open?id=0B5s13shPbjz7cG5uRXRvYnJ5LVE&#34; alt=&#34;객체 어댑터&#34; /&gt;&lt;/li&gt;
&lt;li&gt;구성을 사용.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adaptee 뿐만 아니라 그 서브 클래스에 대해서도 어댑터 역할을 할 수 있다는 장점이 있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;클래스 어댑터&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;특정 어댑티 클래스에만 제공&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;어댑티 전체를 다시 구현하지 않아도 된다는 장점이있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;서브클래스기 때문에 어댑티의 행동을 오버라이드할 수 있는 장점이있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;다중 상속을 이용하여야 하기 때문에 자바에서는 사용할 수가 없다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;퍼사드-패턴:9f571712f0267fca69705d7ef0b317d4&#34;&gt;퍼사드 패턴?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;집에있는 홈시어터 로 영화를 보기위해서는 팝콘기계를 켠다 -&amp;gt; 팝콘튀기기 시작 -&amp;gt; 전등을 어둡게 조절 -&amp;gt; 스크린을 내린다 -&amp;gt;
프로제거를 켠다 &amp;hellip;&amp;hellip;..&lt;/li&gt;
&lt;li&gt;이복잡한 과정을 하나의 인터페이스에 필요한 기능만 묶어 HomeTheaterFacade Interface(통합 인터페이스)의 watchMovice() 메서드로 영화볼      때의 기능만을 묶을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;퍼사드-패턴의-정의:9f571712f0267fca69705d7ef0b317d4&#34;&gt;퍼사드 패턴의 정의&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;어떤 서브시스템의 일련의 인터페이스에 대한 통합된 인터페이스를 제공합니다. 퍼사드에 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용
할 수 있습니다.&lt;/li&gt;
&lt;li&gt;단순화된 인터페이스를 제공하면서도, 클라이언트에서 필요로 한다면 시스템의 모든 기능을 사용 할수 있도록 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;어댑터-파사드-패턴의-차이점:9f571712f0267fca69705d7ef0b317d4&#34;&gt;어댑터/파사드 패턴의 차이점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;어댑터패턴은 인터페이스를 변경해서 클라이언트에서 필요로 하는 인터페이스로 적응시키기위한 용도로 사용되며, 퍼사드 패턴은 어떤
서브시스템에 대한 간단한 인터페이스를 제공하기 위한용도로 쓰인다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;디자인-원칙:9f571712f0267fca69705d7ef0b317d4&#34;&gt;디자인 원칙&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;최소 지식 원칙 - 정말 친한 친구하고만 얘기하라.&lt;/li&gt;
&lt;li&gt;시스템을 디자인할 때, 어떤 객체든 그객체와 상호작용을 하는 클래스의 개수에 주의해야하며, 그런 객체들과 어떤 식으로 상호작용을 하는지에도
주의를 기울이라는 뜻&lt;/li&gt;
&lt;li&gt;이 원칙을 잘 따르면 여러 클래스들이 복잡하게 얽혀서 시스템의 한부분을 변경했을 때 다른 부분까지 줄질이 고쳐야 되는 상활을 미리 방지할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;위-원칙을-지키기위한-가이드라인:9f571712f0267fca69705d7ef0b317d4&#34;&gt;위 원칙을 지키기위한 가이드라인&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;객체 자체&lt;/li&gt;
&lt;li&gt;메소드에 매개변수로 전달된 객체&lt;/li&gt;
&lt;li&gt;그 메소드에서 생성하거나 인스턴스를 만든객체&lt;/li&gt;
&lt;li&gt;그 객체에 속하는 구성요소&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;원칙을-따르지-않는경우:9f571712f0267fca69705d7ef0b317d4&#34;&gt;원칙을 따르지 않는경우&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public float getTemp(){
    Thermometer thermometer = station.getThermometer();
    return thermometer.getTemperature();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;station으로부터 thermometer라는 객체를 받은 다음, 그 객체의 getTemperature 메소드를 직접호출하고있다.&lt;/p&gt;

&lt;h2 id=&#34;원칙을-따르는-경우:9f571712f0267fca69705d7ef0b317d4&#34;&gt;원칙을 따르는 경우&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public float getTemp(){
return station.getTemperature();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;최소 지식 원칙을 적용하여 Station 클래스에 thermometer에 요청을 해주는 메소드를 추가하여 의존해야 하는 클래스의 개수를 줄였다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HEAD First Design Patterns Study</title>
      <link>http://kwsstudy.github.io/post/Home/</link>
      <pubDate>Sun, 21 Feb 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/Home/</guid>
      <description>

&lt;h1 id=&#34;head-first-design-patterns-study:b4d7124d2993cd13aabeec1fc19baf51&#34;&gt;HEAD First Design Patterns Study&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;스터디 기간 : 02/28 ~ 04/10&lt;/li&gt;
&lt;li&gt;스터디 장소 : 서울대 입구역 AZ Story&lt;/li&gt;
&lt;li&gt;스터디원 : 노휘겸 / 박민규 / 이돈일 / 이지훈&lt;/li&gt;
&lt;li&gt;보증금 : 20,000원&lt;/li&gt;
&lt;li&gt;스터디 룸비 : 28,000원&lt;/li&gt;
&lt;li&gt;한달 한번 결석 가능&lt;/li&gt;
&lt;li&gt;발표날 빠지면 영구 제명( 천재지변 / 경조사제외 )&lt;/li&gt;
&lt;li&gt;자기 발표 부분 &lt;a href=&#34;https://github.com/KWSStudy/DesignPartterns/wiki&#34;&gt;Wiki&lt;/a&gt;에 정리 필&lt;/li&gt;
&lt;li&gt;스터디 목표 : 디자인 패턴을 실무에 적용 할 수있는 레벨까지 끌어 올리기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;스터디-진행:b4d7124d2993cd13aabeec1fc19baf51&#34;&gt;스터디 진행&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;02/28&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/옵저버-패턴&#34;&gt;옵저버 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/데코레이터-패턴&#34;&gt;데코레이터 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/06&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/팩토리-패턴&#34;&gt;팩토리 패턴&lt;/a&gt; (노휘겸)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/스트래티지-패턴&#34;&gt;스트래티지 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/싱글턴-패턴&#34;&gt;싱글턴 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/13&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/커맨드-패턴&#34;&gt;커맨드 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/어댑터-패턴과-퍼사드-패턴&#34;&gt;어댑터 패턴과 퍼사드 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/20 (노휘겸 결)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/템플릿-메소드-패턴&#34;&gt;템플릿 메소드 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/이터레이터와-컴포지트-패턴&#34;&gt;이터레이터와 컴포지트 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/27(이지훈 결)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/스테이트-패턴&#34;&gt;스테이트 패턴&lt;/a&gt; (노휘겸)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/프록시-패턴&#34;&gt;프록시 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;04/03&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/컴파운드-패턴&#34;&gt;컴파운드 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/나머지-패턴&#34;&gt;나머지 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>