<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>스트래티지 패턴 on Korea Web Service Study Group</title>
    <link>http://kwsstudy.github.io/tags/%EC%8A%A4%ED%8A%B8%EB%9E%98%ED%8B%B0%EC%A7%80-%ED%8C%A8%ED%84%B4/</link>
    <description>Recent content in 스트래티지 패턴 on Korea Web Service Study Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2016 12:00:00 +0900</lastBuildDate>
    <atom:link href="http://kwsstudy.github.io/tags/%EC%8A%A4%ED%8A%B8%EB%9E%98%ED%8B%B0%EC%A7%80-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>스트래티지 패턴</title>
      <link>http://kwsstudy.github.io/post/%EC%8A%A4%ED%8A%B8%EB%9E%98%ED%8B%B0%EC%A7%80-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 06 Mar 2016 12:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/%EC%8A%A4%ED%8A%B8%EB%9E%98%ED%8B%B0%EC%A7%80-%ED%8C%A8%ED%84%B4/</guid>
      <description>

&lt;h3 id=&#34;정의:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;정의&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;알고리즘군(기능)을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;스트래티지 패턴을 사용하면 알고리즘을 사용하는 클라이언트와 독립적으로 알고리즘을 변경할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;스트래티지-패턴의-적용-원칙:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;스트래티지 패턴의 적용 원칙&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;자주 바뀌는 부분(기능)을 바뀌지 않는 부분과 분리하여 캡슐화 한다.&lt;/li&gt;
&lt;li&gt;상속 보다는 구성(멤버 변수?)을 활용한다.&lt;/li&gt;
&lt;li&gt;구현이 아닌 인터페이스에 맞추어 프로그래밍 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;원칙을-무시한-코드:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;원칙을 무시한 코드&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* 모든 게시판이 만들어질때 상속 받을 슈퍼 클래스 */
public class Article{
 public boolean insertArticle(){ 입력을 구현 }
 public List selectArticle(){ 선택을 구현 }
 public boolean updateArticle(){ 수정을 구현 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article을 상속 받은 SimpleArticle1 */
public class SimpleArticle1 extend Article{
 public List selectArticle(){선택을 구현}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article을 상속 받은 SimpleArticle2 */
public class SimpleArticle2 extend Article{
 public List selectArticle(){선택을 구현}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;게시판에 삭제기능도 필요 하다는 요구조건이 추가되어 최상위 클래스인 Article에 삭제기능을 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* 모든 게시판이 만들어질때 상속 받을 슈퍼 클래스 */
public class Article{
 public boolean insertArticle(){ 입력을 구현 }
 public List selectArticle(){ 선택을 구현 }
 public boolean updateArticle(){ 수정을 구현 }
 public boolean deleteArticle(){ 삭제를 구현 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;이후 새로운 SimpleArticle3게시판을 추가했는데 해당 게시판은 글 삭제가 불가능한 게시판&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article을 상속 받은 SimpleArticle3 */
public class SimpleArticle3 extend Article{
 public List selectArticle(){선택을 구현}
 public boolean deleteArticle(){ 아무것도 하지 않도록 구현 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;새로운 SimpleArticle4게시판을 추가했는데 해당 게시판은 글 쓰기,수정,삭제가 불가능한 게시판&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article을 상속 받은 SimpleArticle4 */
public class SimpleArticle4 extend Article{
 public boolean insertArticle(){ 아무것도 하지 않도록 구현 }
 public List selectArticle(){ 선택을 구현 }
 public boolean updateArticle(){ 아무것도 하지 않도록 구현 }
 public boolean deleteArticle(){ 아무것도 하지 않도록 구현 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;문제점:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;문제점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;선택 이외의 기능들은 자주 변경이 일어남.&lt;/li&gt;
&lt;li&gt;Article에 구현되어 있는 기능을 상속을 받기 때문에 새로운 Article이 추가 될 때 마다 기능들을 새로 오버라이드 해야함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;해결방법:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;해결방법&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;변경이 자주 일어나는 기능들을 때로 분리하여 캡슐화 한다.&lt;/li&gt;
&lt;li&gt;변경되는 기능을 Article에 구현이 아닌 구성을 사용한다.&lt;/li&gt;
&lt;li&gt;기능을 인터페이스화 하여 필요한 구현체를 게시판에서 선택하여 사용할 수 있게 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;원칙을-적용한-코드:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;원칙을 적용한 코드&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article에서 사용할 기능을 정의한 인터페이스 */
public interface ArticleDML{
 public boolean insertArticle();
 public boolean updateArticle();
 public boolean deleteArticle();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* 삭제기능을 하지 못하는 Article에서 사용할 클래스 */
public class DoNotUseDeleteDML implements ArticleDML {
 public boolean insertArticle(){입력을 구현};
 public boolean updateArticle(){수정을 구현};
 public boolean deleteArticle(){아무것도 하지않음};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* 입력,수정,삭제기능을 하지 못하는 Article에서 사용할 클래스 */
public class DoNotUseAllDML implements ArticleDML {
 public boolean insertArticle(){아무것도 하지않음};
 public boolean updateArticle(){아무것도 하지않음};
 public boolean deleteArticle(){아무것도 하지않음};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* 모든 게시판이 만들어질때 상속 받을 슈퍼 클래스 */
public class Article{
 public ArticleDML articleDML; //Article에서 사용할 기능을 정의한 인터페이스
 public List selectArticle(){ 선택을 구현 } //모든 Article에서 변하지 않는 공통 기능
 public boolean insertArticle(){ articleDML.insertArticle() }
 public boolean updateArticle(){ articleDML.updateArticle() }
 public boolean deleteArticle(){ articleDML.deleteArticle() }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;삭제를 못하는 SimpleArticle3게시판의 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article을 상속 받은 SimpleArticle3 */
public class SimpleArticle3 extend Article{
 public SimpleArticle3(){
  articleDML = new DoNotUseDeleteDML();
 }
 public List selectArticle(){선택을 구현}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;쓰기,수정,삭제가 불가능한 SimpleArticle4게시판의 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/* Article을 상속 받은 SimpleArticle4 */
public class SimpleArticle4 extend Article{
 public SimpleArticle3(){
  articleDML = new DoNotUseAllDML();
 }
 public List selectArticle(){ 선택을 구현 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;결과:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;결과&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;각 Article에 기능을 추가할때 선택 적용 할수 있게 됐다.&lt;/li&gt;
&lt;li&gt;구현 상속이 아닌 인터페이스 구성을 이용하여 기능의 변경에 좀더 간편 하게 적용할 수 있게 되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;이후에-더-변경할-부분을-찾아-보자:ddc50a9188303ce00742c1b5781ef4ac&#34;&gt;이후에 더 변경할 부분을 찾아 보자&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KWSStudy/DesignPartterns/tree/master/src/com/kws/stratege&#34;&gt;샘플소스확인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.kr/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=java+%EC%BA%A1%EC%8A%90%ED%99%94&#34;&gt;캡슐화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HEAD First Design Patterns Study</title>
      <link>http://kwsstudy.github.io/post/Home/</link>
      <pubDate>Sun, 21 Feb 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/Home/</guid>
      <description>

&lt;h1 id=&#34;head-first-design-patterns-study:b4d7124d2993cd13aabeec1fc19baf51&#34;&gt;HEAD First Design Patterns Study&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;스터디 기간 : 02/28 ~ 04/10&lt;/li&gt;
&lt;li&gt;스터디 장소 : 서울대 입구역 AZ Story&lt;/li&gt;
&lt;li&gt;스터디원 : 노휘겸 / 박민규 / 이돈일 / 이지훈&lt;/li&gt;
&lt;li&gt;보증금 : 20,000원&lt;/li&gt;
&lt;li&gt;스터디 룸비 : 28,000원&lt;/li&gt;
&lt;li&gt;한달 한번 결석 가능&lt;/li&gt;
&lt;li&gt;발표날 빠지면 영구 제명( 천재지변 / 경조사제외 )&lt;/li&gt;
&lt;li&gt;자기 발표 부분 &lt;a href=&#34;https://github.com/KWSStudy/DesignPartterns/wiki&#34;&gt;Wiki&lt;/a&gt;에 정리 필&lt;/li&gt;
&lt;li&gt;스터디 목표 : 디자인 패턴을 실무에 적용 할 수있는 레벨까지 끌어 올리기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;스터디-진행:b4d7124d2993cd13aabeec1fc19baf51&#34;&gt;스터디 진행&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;02/28&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/옵저버-패턴&#34;&gt;옵저버 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/데코레이터-패턴&#34;&gt;데코레이터 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/06&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/팩토리-패턴&#34;&gt;팩토리 패턴&lt;/a&gt; (노휘겸)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/스트래티지-패턴&#34;&gt;스트래티지 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/싱글턴-패턴&#34;&gt;싱글턴 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/13&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/커맨드-패턴&#34;&gt;커맨드 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/어댑터-패턴과-퍼사드-패턴&#34;&gt;어댑터 패턴과 퍼사드 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/20 (노휘겸 결)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/템플릿-메소드-패턴&#34;&gt;템플릿 메소드 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/이터레이터와-컴포지트-패턴&#34;&gt;이터레이터와 컴포지트 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03/27(이지훈 결)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/스테이트-패턴&#34;&gt;스테이트 패턴&lt;/a&gt; (노휘겸)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/프록시-패턴&#34;&gt;프록시 패턴&lt;/a&gt; (박민규)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;04/03&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/컴파운드-패턴&#34;&gt;컴파운드 패턴&lt;/a&gt; (이돈일)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kwsstudy.github.io/post/나머지-패턴&#34;&gt;나머지 패턴&lt;/a&gt; (이지훈)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>