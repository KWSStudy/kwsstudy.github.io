<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>팩토리 패턴 on Korea Web Service Study Group</title>
    <link>http://kwsstudy.github.io/tags/%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/</link>
    <description>Recent content in 팩토리 패턴 on Korea Web Service Study Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2016 11:00:00 +0900</lastBuildDate>
    <atom:link href="http://kwsstudy.github.io/tags/%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>팩토리 패턴</title>
      <link>http://kwsstudy.github.io/post/%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 06 Mar 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/</guid>
      <description>

&lt;h1 id=&#34;팩토리패턴:f60317ff69c8c9dc10970e9a8290b613&#34;&gt;팩토리패턴&lt;/h1&gt;

&lt;p&gt;디자인패턴 중에서 생성 패턴(Creational Pattern)의 대표적인 패턴들이다.&lt;/p&gt;

&lt;h2 id=&#34;팩토리-패턴의-종류:f60317ff69c8c9dc10970e9a8290b613&#34;&gt;팩토리 패턴의 종류&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;팩토리 메서드(Factory Method)&lt;/strong&gt; 패턴&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;추상 팩토리(Abstract Factory)&lt;/strong&gt; 패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;시작하기전에:f60317ff69c8c9dc10970e9a8290b613&#34;&gt;시작하기전에&lt;/h2&gt;

&lt;p&gt;디자인 패턴에 포함되지는 않지만, 팩토리 패턴의 기본이 되는 팩토리 구조에 대해서 알아보자.&lt;/p&gt;

&lt;h3 id=&#34;팩토리를-사용하는-이유:f60317ff69c8c9dc10970e9a8290b613&#34;&gt;팩토리를 사용하는 이유&lt;/h3&gt;

&lt;p&gt;클라이언트에서 사용할 객체를 생성하는 부분을 캡슐화하여 느슨한 결합 상태로 만들어, 변화에는 닫혀있고 확장에는 열려있는 코드를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;변경 전의 코드&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Pizza 클래스의 객체의 생성 및 사용을 모두 수행하는 메서드
Pizza orderPizza(String type) {
  Pizza pizza;

  if (type.equals(&amp;quot;cheese&amp;quot;)) {
    pizza = new CheesePizza();
  } else if (type.equals(&amp;quot;greek&amp;quot;)) {
    pizza = new GreekPizza();
  } else if (type.equals(&amp;quot;pepperoni&amp;quot;)) {
    pizza = new PepperoniPizza();
  }

  pizza.prepare();
  pizza.bake();
  pizza.cut();
  pizza.box();

  return pizza;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;변경 후의 코드&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Pizza 클래스의 생성을 전담하는 클래스 = 팩토리
public class SimplePizzaFactory {
  public Pizza createPizza(String type) {
    Pizza = null;

    if (type.equals(&amp;quot;cheese&amp;quot;)) {
      pizza = new CheesePizza();
    } else if (type.equals(&amp;quot;greek&amp;quot;)) {
      pizza = new GreekPizza();
    } else if (type.equals(&amp;quot;pepperoni&amp;quot;)) {
      pizza = new PepperoniPizza();
    }

    return pizza;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SimplePizzaFactory factory = new SimplePizzaFactory();

// Pizza 객체의 생성은 팩토리에 맞기고 사용에 전념하는 메서드
Pizza orderPizza(String type) {
  Pizza pizza;

  pizza = factory.createPizza(type);

  pizza.prepare();
  pizza.bake();
  pizza.cut();
  pizza.box();

  return pizza;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;클래스 다이어그램&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWU215OFdoLXBaWDQ&#34; alt=&#34;팩토리&#34; /&gt;&lt;/p&gt;

&lt;p&gt;##팩토리 메소드 (Factory Method)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;객체를 생성하는 인터페이스를 정의하지만, 인스턴스를 만들 클래스의 결정은 서브클래스가 한다. Factory Method 패턴에서는 클래스의 인스턴스를 만드는 시점을 서브클래스로 미룬다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GoF의 디자인 패턴&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;구조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWOTEwZy1nd0pHMVE&#34; alt=&#34;팩토리 메소드&#34; /&gt;&lt;/p&gt;

&lt;p&gt;팩토리 메소드 패턴에서는 서브클래스에서 어떤 클래스를 만들지 결정하게 함으로써 객체 생성을 캡슐화한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public abstract class PizzaStore {
  // 실제 객체의 생성이 일어날 추상 메서드 (서브 클래스에 객체의 생성의 위임)
  abstract Pizza createPizza(String item);

  public Pizza OrderPizza(String type) {
    Pizza pizza = createPizza(type);

    pizza.prepare();
    pizza.bake();
    pizza.cut();
    pizza.box();

    return pizza;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 객체의 생성을 위임 받은 서브 클래스
public class NYPizzaStore extends PizzaStore {
  Pizza createPizza(String item) {
    if (item.equals(&amp;quot;cheese&amp;quot;)) {
      return new NYStyleCheesePizza();
    } else if (item.equals(&amp;quot;veggie&amp;quot;)) {
      return new NYStyleVeggiePizza();
    } else if (item.equals(&amp;quot;clam&amp;quot;)) {
      return new NYStyleClamPizza();
    } else if (item.equals(&amp;quot;pepperoni&amp;quot;)) {
      return new NYStylePepperoniPizza();
    } else return null;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;클래스 다이어그램&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWSzNFYXczSUQ0akk&#34; alt=&#34;팩토리메소드 예제 다이어그램&#34; /&gt;&lt;/p&gt;

&lt;p&gt;##추상 팩토리 (Abstract Factory)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;구체적인 클래스를 지정하지 않고 관련성을 갖는 객체들의 집합을 생성하거나 서로 독립적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GoF의 디자인 패턴&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;구조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWY3RXOURJUkl0dlE&#34; alt=&#34;추상 팩토리&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class NYPizzaStore extends PizzaStore {
 
  protected Pizza createPizza(String item) {
    Pizza pizza = null;

    // 팩토리 객체
    PizzaIngredientFactory ingredientFactory = 
      new NYPizzaIngredientFactory();
 
    if (item.equals(&amp;quot;cheese&amp;quot;)) {
      // 생성된 팩토리 객체를 함께 전달하여 내부에서 재료클래스의 객체를 생성
      pizza = new CheesePizza(ingredientFactory);
      pizza.setName(&amp;quot;New York Style Cheese Pizza&amp;quot;);
    } else if (item.equals(&amp;quot;veggie&amp;quot;)) {
      pizza = new VeggiePizza(ingredientFactory);
      pizza.setName(&amp;quot;New York Style Veggie Pizza&amp;quot;);
    } else if (item.equals(&amp;quot;clam&amp;quot;)) {
      pizza = new ClamPizza(ingredientFactory);
      pizza.setName(&amp;quot;New York Style Clam Pizza&amp;quot;);
    } else if (item.equals(&amp;quot;pepperoni&amp;quot;)) {
      pizza = new PepperoniPizza(ingredientFactory);
      pizza.setName(&amp;quot;New York Style Pepperoni Pizza&amp;quot;);
    } 
    return pizza;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 추상 팩토리를 사용하는 클라이언트 역할을 수행
// Pizza 클래스는 도우, 소스, 치즈등의 재료 객체들의 집합
public class CheesePizza extends Pizza {
  // 재료의 인스턴스를 생성해주는 추상 팩토리
  PizzaIngredientFactory ingredientFactory;
 
  public CheesePizza(PizzaIngredientFactory ingredientFactory) {
    this.ingredientFactory = ingredientFactory;
  }
 
  void prepare() {
    // 객체들의 집합을 생성
    dough = ingredientFactory.createDough();
    sauce = ingredientFactory.createSauce();
    cheese = ingredientFactory.createCheese();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Abstract Factory
public interface PizzaIngredientFactory {
  public Dough createDough();
  public Sauce createSauce();
  public Cheese createCheese();
  public Veggies[] createVeggies();
  public Pepperoni createPepperoni();
  public Clams createClam();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// ConcreteFactory1
public class NYPizzaIngredientFactory implements PizzaIngredientFactory {
 
  public Dough createDough() {
    return new ThinCrustDough();
  }
 
  public Sauce createSauce() {
    return new MarinaraSauce();
  }
 
  public Cheese createCheese() {
    return new ReggianoCheese();
  }
 
  public Veggies[] createVeggies() {
    Veggies veggies[] = { new Garlic(), new Onion(), new Mushroom(), new RedPepper() };
    return veggies;
  }
 
  public Pepperoni createPepperoni() {
    return new SlicedPepperoni();
  }

  public Clams createClam() {
    return new FreshClams();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// AbstractProductA
public interface Cheese {
  public String toString();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// ConcreteProductA1
public class ReggianoCheese implements Cheese {
  public String toString() {
    return &amp;quot;Reggiano Cheese&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;클래스 다이어그램&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.googledrive.com/host/0Byw6XXFkbgXWMEFQMzZELU9MRW8&#34; alt=&#34;팩토리메소드 예제 다이어그램&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>