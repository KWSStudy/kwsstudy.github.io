<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>템플릿 메소드 패턴 on Korea Web Service Study Group</title>
    <link>http://kwsstudy.github.io/tags/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4/</link>
    <description>Recent content in 템플릿 메소드 패턴 on Korea Web Service Study Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Mar 2016 11:00:00 +0900</lastBuildDate>
    <atom:link href="http://kwsstudy.github.io/tags/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>템플릿 메소드 패턴</title>
      <link>http://kwsstudy.github.io/post/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 20 Mar 2016 11:00:00 +0900</pubDate>
      
      <guid>http://kwsstudy.github.io/post/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4/</guid>
      <description>

&lt;h3 id=&#34;정의:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;정의&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;서로 다른 클래스들의 알고리즘이 공통될 때(상세 기능이 아닌 일반적인 관점에서)  공통된 알고리즘을 슈퍼클래스에서 정의하고 일부 다른부분은 추상 메소드로 정의하여 서브클래스에서 구현하는 패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;템플릿-메소드-패턴의-특징:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;템플릿 메소드 패턴의 특징&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;코드의 재사용에 크게 도움된다.&lt;/li&gt;
&lt;li&gt;클래스간의 의존성을 낮춰준다.&lt;/li&gt;
&lt;li&gt;프레임워크를 만들때 자주 사용되는 패턴이다.&lt;/li&gt;
&lt;li&gt;변경이 일어나지 않는 부분은 슈퍼 클래스에서 final로 지정하여 오버라이드하지 못하게 막는다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;템플릿-메소드-디자인-원칙-책에서는-헐리우드-원칙이라-나옴:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;템플릿 메소드 디자인 원칙(책에서는 헐리우드 원칙이라 나옴)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;저수준 구성요소가 고수준의 구성요소를 직접 호출할 수 없다.(고수준의 구성요소에서 호출하기전에 저수준 구성요소는 대기한다.)&lt;/li&gt;
&lt;li&gt;클래스의 주요 기능은 고수준 구성요소에서 장악하고 구현이 필요한 기능만 저수준 클래스를 호출한다.&lt;/li&gt;
&lt;li&gt;클래스의 구성요소들의 사용은 고수준 구성요소(템플릿을 가진 슈퍼클래스를 말하는듯)에서 결정한다.&lt;/li&gt;
&lt;li&gt;저수준 구성요소(템플릿에서 추상메소드로 정의한 메소드를 상세구현한 자식 클래스)는 고수준 구성 요소를 직접 호출할수 없다.&lt;/li&gt;
&lt;li&gt;이 원칙이 위반되면 클래스간의 의존도가 매우 높아진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;서로-다른-종류의-db-조회-적용-예제:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;서로 다른 종류의 DB 조회 적용 예제&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;오라클/mysql/mssql&amp;hellip;.등등 하나의 어플리케이션에서 여러대의 DB에 select쿼리를 사용 한다고 가정.&lt;/li&gt;
&lt;li&gt;템플릿 메소드 패턴을 사용하지 않고 가져올 경우 아래의 코드를 각 클래스마다 사용해야함&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class OracleSelect {
    public void getSelect(){
        try{
            System.out.println(&amp;quot;Oracle Driver Loading&amp;quot;);
        }catch(Exception e){
            System.out.println(&amp;quot;Oracle Driver Loading Exception&amp;quot;);
        }
        
        try{
            System.out.println(&amp;quot;Oracle getConnection&amp;quot;);
            System.out.println(&amp;quot;Oracle createStatement&amp;quot;);
            System.out.println(&amp;quot;Oracle executeQuery&amp;quot;);
        }catch(Exception e){
            System.out.println(&amp;quot;Oracle Exception&amp;quot;);
        }finally{
            System.out.println(&amp;quot;Oracle Resource Close&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;템플릿-메소드의-적용:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;템플릿 메소드의 적용&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;각 DB연결후 쿼리를 가져오는 부분에서 사용되는 기능들을 일반적인 관점으로 공통화 시킨다.

&lt;ol&gt;
&lt;li&gt;오라클 드라이버를 로딩한다./My-sql 드라이버를 로딩한다.(x) -&amp;gt; DB드라이버를 로딩한다.&lt;/li&gt;
&lt;li&gt;오라클 커넥션을 가져온다./My-sql 커넥션을 가져온다.(x) -&amp;gt; 커넥션을 가져온다.&lt;/li&gt;
&lt;li&gt;오라클 statement을 생성한다./My-sql statement을 생성한다.(x) -&amp;gt; statement을 생성한다.&lt;/li&gt;
&lt;li&gt;오라클에 select 쿼리를 날린다./My-sql에 select 쿼리를 날린다.(x) -&amp;gt; select 쿼리를 날린다.&lt;/li&gt;
&lt;li&gt;오라클에 사용된 리소스를 close한다./My-sql에 사용된 리소스를 close한다.(x) -&amp;gt; 리소스를 close한다.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;공통화 시킨 기능을 토대로 템플릿으로 사용될 기능에서 변경이 안되는 부분, 변경될 부분을 분리하여 변경이 안되는 부분은 final로 변경되는 부분은 추상메소드로 기능을 정의한다.&lt;/li&gt;
&lt;li&gt;적용 예&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//템플릿으로 사용될 부분
public abstract class DBSelectTemplate {
final void getSelect(String dbName,String query){
    try{
        driverLoading(dbName);
    }catch(Exception e){
        System.out.println(dbName + &amp;quot; Driver Loading Exception&amp;quot;);
    }
    
    try{
        getConnection(dbName);
        createStatement(dbName);
        executeQuery(query);
    }catch(Exception e){
        System.out.println(dbName + &amp;quot; Exception&amp;quot;);
    }finally{
        resourceClose(dbName);
    }
}

//1.DB드라이버를 로딩한다.
final void driverLoading(String dbName){
    System.out.println(dbName + &amp;quot; Driver Loading&amp;quot;);
}

//2.커넥션을 가져온다.
final void getConnection(String dbName){
    System.out.println(dbName + &amp;quot; getConnection&amp;quot;);
}
//3.statement을 생성한다.
final void createStatement(String dbName){
    System.out.println(dbName + &amp;quot; createStatement&amp;quot;);
}
//4.select 쿼리를 날린다.
abstract void executeQuery(String query);

//5.리소스를 close한다.
final void resourceClose(String dbName){
    System.out.println(dbName + &amp;quot; Resource Close&amp;quot;);
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MysqlSelectUseTemplate extends DBSelectTemplate{

    @Override
    void executeQuery(String query) {
        // TODO Auto-generated method stub
        System.out.println(&amp;quot;Mysql ==&amp;gt; &amp;quot; + query);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;결과:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;결과&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;공통된 부분을 분리하여 적용함으로써 코드의 재사용율이 높아졌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;템플릿-메소드가-사용된곳을-생각해보자:dd6d153b16071c4efa671b38bed5c0f9&#34;&gt;템플릿 메소드가 사용된곳을 생각해보자&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KWSStudy/DesignPartterns/tree/master/src/com/kws/template&#34;&gt;샘플소스확인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;실전 패턴 적용이 교재에 나온 내용과 완전히 일치할 수 없다. 주어진 상황과 제약 조건에 맞추어 적용할 수 있어야한다. ex)Arrays.sort()&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>